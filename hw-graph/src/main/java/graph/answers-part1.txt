## CSE 331 hw-graph Part 1 Questions

## Section 1
###########################################################################

1. Write an AF and RI for IntQueue1 and IntQueue2.

    ### IntQueue1

    Abstraction Function:
    Entries is a list of integers that represents a queue
    where the entries[0] is the front of the queue and 
    entries[size] is back of the queue

    Representation Invariant:
    For any index i such that 0 ≤ i < size, entries[i] != null


    ### IntQueue2

    Abstraction Function:
    Entries is an array of integers that represents a queue, where
    front represents the front of the queue (the index of the
    next item to be removed in the array) and size represents the
    number of integers in the queue.


    Representation Invariant:
    For any index i such that 0 ≤ i < size, entries[size] != null




2. Group the snapshots of IntQueue2's internal state into groups that have the same abstract state.
    A, B, D, G - space remaining to add to queue
    E - no space remaining to add to queue
    C, F, H - elements are wrapped around



3. For each signature below, state and justify in 1-2 sentences (per part) whether the method or constructor
could possibly expose the representation, given the information available. Explain any assumptions you made.

    a. `public int solveEquations(int x, int y, int z)`
        solveEquations seems to plug in values into an equation and output
        the result. The purpose of the method and the return value shows that
        it would not expose the rep.


    b. `public String[] decode(boolean slowly)`
        As strings are immutable, the method will not expose the rep.


    c. `private Date myBirthday()`
        Since the method is private, it cannot be called by the client.
        Therefore it would not expose the rep.


    d. `public String toString()`
        toString might view fields of the object to convert it to
        a string. The return value is a string, so assuming toString does
        not mutate the fields of the object, it would not expose the rep.


    e. `public Iterator<Integer> elements()`
        Returning an iterator could possibly expose the rep if an iterator
        of fields in the object is returned.


    f. `public Deck(List<Card> cards)`
        Assuming that the constructor accounts for the rep before the
        rep check is called, the constructor will not expose the rep



## Section 2
###########################################################################

Briefly explain why you included the operations you did and why you feel they are a sufficient
interface to a graph. If your design includes multiple classes or interfaces, explain why you
included each one; if not, explain whether you considered additional classes and why you decided
not to include them.

addNode and addEdge were necessary in forming the basic components of a directed graph. listNode,
listChildren, nodeExists, edgeExists, and getLabel methods are important to view the state of a graph.


## Section 3
###########################################################################

What was your testing strategy for this assignment? How do your script tests and JUnit tests
differ from each other (if they do), and why?

For methods that added things to the graph, I added more test cases to their scripts in order
to expose all the edge cases in the specification I wrote, as well as tested general behavior
of the graph after adding the nodes/edges and assumed that the observer methods worked
in order for the output format to be correct. For methods that observed the state of the object, I
assumed that the mutator methods worked in setting the state of the object, and checked if the outputs
of the methods matched what I intended for them to be. In this case I also added test cases for
exposing the edge cases that I wrote in the specification. I didn't write any JUnit tests as I felt
that the test scripts thoroughly covered most possible states of the object.



